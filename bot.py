# -*- coding: utf-8 -*-
import os
import json
import asyncio
import aiohttp
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN", "8196071953:AAF2wQ19VOkfPKvPfPaG0YoX33eVcWaC_yU")
CHAT_ID = int(os.getenv("TG_CHAT_ID", "-1002841862533"))
ADMIN_ID = int(os.getenv("TG_ADMIN_ID", "914344682"))

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
active_polls = {}
STATS_FILE = "stats.json"

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
def load_stats():
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_stats(data):
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

stats = load_stats()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ ===
polls_config = [
    {
        "day": "tue",
        "time_poll": "10:00",
        "time_game": "20:00",
        "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
        "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ü§î, –æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ"]
    },
    {
        "day": "thu",
        "time_poll": "10:00",
        "time_game": "20:00",
        "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
        "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ü§î, –æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ"]
    },
    {
        "day": "fri",
        "time_poll": "21:00",
        "time_game": "12:00",
        "question": "–ó–∞–≤—Ç—Ä–∞ –≤ 12:00 —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ?",
        "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"]
    }
]

# === –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def reset_updates():
    try:
        updates = await bot.get_updates()
        if updates:
            last = updates[-1].update_id
            await bot.get_updates(offset=last + 1)
        print("[‚úÖ –ê–ø–¥–µ–π—Ç—ã –æ—á–∏—â–µ–Ω—ã]")
    except Exception as e:
        print(f"[‚ö†Ô∏è] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∞–ø–¥–µ–π—Ç—ã: {e}")

async def start_poll(poll):
    try:
        msg = await bot.send_poll(
            chat_id=CHAT_ID,
            question=poll["question"],
            options=poll["options"],
            is_anonymous=False
        )
        active_polls[msg.poll.id] = {
            "message_id": msg.message_id,
            "poll": poll,
            "votes": {}
        }
        print(f"[{datetime.now():%H:%M:%S}] üó≥ –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω: {poll['question']}")
    except Exception as e:
        print(f"[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞: {e}]")

@dp.poll_answer_handler()
async def handle_poll_answer(poll_answer: types.PollAnswer):
    user_id = str(poll_answer.user.id)
    username = poll_answer.user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    poll_id = poll_answer.poll_id
    if poll_id in active_polls:
        option = active_polls[poll_id]["poll"]["options"][poll_answer.option_ids[0]]
        active_polls[poll_id]["votes"][user_id] = {
            "name": username,
            "answer": option
        }

async def send_summary(poll):
    poll_entry = next((v for v in active_polls.values() if v["poll"] == poll), None)
    if not poll_entry:
        print(f"[info] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –¥–ª—è '{poll['question']}'")
        return

    poll_id = poll_entry["poll"]
    votes = poll_entry["votes"]
    yes_votes = [v["name"] for v in votes.values() if "–î–∞" in v["answer"]]

    text = f"<b>üìä –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞:</b>\n{poll['question']}\n\n" \
           f"‚úÖ <b>–ü—Ä–∏–¥—É—Ç:</b> {len(yes_votes)}\n" \
           + "\n".join(f"‚Äî {name}" for name in yes_votes) if yes_votes else "‚Äî –ù–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è üòÖ"

    try:
        await bot.send_message(CHAT_ID, text, parse_mode="HTML")
        print(f"[{datetime.now():%H:%M:%S}] üìä –°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for uid, v in votes.items():
        if "–î–∞" in v["answer"]:
            stats[uid] = stats.get(uid, {"name": v["name"], "count": 0})
            stats[uid]["count"] += 1
    save_stats(stats)

async def keep_alive():
    url = os.getenv("KEEPALIVE_URL")
    if not url:
        return
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                await session.get(url)
            print(f"[{datetime.now():%H:%M:%S}] üåê Keep-alive ping sent")
        except Exception as e:
            print(f"[‚ö†Ô∏è KeepAlive Error]: {e}")
        await asyncio.sleep(59 * 60)

def schedule_polls():
    scheduler.remove_all_jobs()
    for poll in polls_config:
        tp = list(map(int, poll["time_poll"].split(":")))
        tg = list(map(int, poll["time_game"].split(":")))
        scheduler.add_job(lambda p=poll: asyncio.create_task(start_poll(p)),
                          trigger="cron", day_of_week=poll["day"],
                          hour=tp[0], minute=tp[1], id=f"poll_{poll['day']}", replace_existing=True)
        scheduler.add_job(lambda p=poll: asyncio.create_task(send_summary(p)),
                          trigger="cron", day_of_week=poll["day"],
                          hour=max(tg[0]-1, 0), minute=tg[1],
                          id=f"summary_{poll['day']}", replace_existing=True)
    print("[‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω]")

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
        return
    schedule_polls()
    if not scheduler.running:
        scheduler.start()
    await message.reply("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7.\n"
                        "–ö–æ–º–∞–Ω–¥–∞ /summary ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã.")
    print(f"[{datetime.now():%H:%M:%S}] /start –æ—Ç {message.from_user.id}")

@dp.message_handler(commands=["poll"])
async def manual_poll(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.get_args().strip().lower()
    if args not in ["tue", "thu", "fri"]:
        await message.reply("‚öôÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å: /poll tue | /poll thu | /poll fri")
        return

    mapping = {"tue": "–≤—Ç–æ—Ä–Ω–∏–∫", "thu": "—á–µ—Ç–≤–µ—Ä–≥", "fri": "—Å—É–±–±–æ—Ç—É"}
    poll = next((p for p in polls_config if p["day"] == args), None)
    await start_poll(poll)
    await message.answer(f"‚úÖ –û–ø—Ä–æ—Å –Ω–∞ {mapping[args]} –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é.")

@dp.message_handler(commands=["summary"])
async def cmd_summary(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    if not active_polls:
        await message.reply("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
        return
    for entry in active_polls.values():
        await send_summary(entry["poll"])

@dp.message_handler(commands=["stats"])
async def cmd_stats(message: types.Message):
    if not stats:
        await message.reply("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    top = sorted(stats.values(), key=lambda x: x["count"], reverse=True)[:5]
    text = "<b>üèÜ –¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:</b>\n\n"
    for i, p in enumerate(top, 1):
        text += f"{i}. {p['name']} ‚Äî <b>{p['count']}</b> ‚öΩ\n"
    await message.reply(text, parse_mode="HTML")

@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.reply("‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n"
                        "/stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-5 –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏\n"
                        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
                        "/poll tue|thu|fri ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
                        "/summary ‚Äî —Å–≤–æ–¥–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def on_startup(_):
    await reset_updates()
    schedule_polls()
    scheduler.start()
    asyncio.create_task(keep_alive())
    print("[üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ]")
    try:
        await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    except:
        pass

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)




