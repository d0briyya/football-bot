# -*- coding: utf-8 -*-
import os
import json
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone
from dotenv import load_dotenv
from aiohttp import web

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN", "8196071953:AAF2wQ19VOkfPKvPfPaG0YoX33eVcWaC_yU")
CHAT_ID = int(os.getenv("TG_CHAT_ID", "-1002841862533"))
ADMIN_ID = int(os.getenv("TG_ADMIN_ID", "914344682"))
DATA_FILE = "bot_data.json"

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

# === –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞ ===
kaliningrad_tz = timezone("Europe/Kaliningrad")
scheduler = AsyncIOScheduler(timezone=kaliningrad_tz)

active_polls = {}
stats = {}

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ ===
polls_config = [
    {
        "day": "tue",
        "time_poll": "10:40",
        "time_game": "20:00",
        "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
        "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ‚ùî (–æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ)"]
    },
    {
        "day": "thu",
        "time_poll": "10:40",
        "time_game": "20:00",
        "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
        "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ‚ùî (–æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ)"]
    },
    {
        "day": "fri",
        "time_poll": "21:00",
        "time_game": "12:00",
        "question": "–ó–∞–≤—Ç—Ä–∞ –≤ 12:00 —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ?",
        "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"]
    }
]

# === –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ===
def save_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
    try:
        data = {"active_polls": active_polls, "stats": stats}
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"[üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã {datetime.now(kaliningrad_tz):%H:%M:%S}]")
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}]")

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    global active_polls, stats
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                active_polls = data.get("active_polls", {})
                stats = data.get("stats", {})
            print("[‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞]")
        else:
            print("[‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å—Ç–∞—Ä—Ç —Å –Ω—É–ª—è]")
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}]")

# === –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def reset_updates():
    try:
        updates = await bot.get_updates()
        if updates:
            last = updates[-1].update_id
            await bot.get_updates(offset=last + 1)
        print("[‚úÖ –ê–ø–¥–µ–π—Ç—ã –æ—á–∏—â–µ–Ω—ã]")
    except Exception as e:
        print(f"[‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∞–ø–¥–µ–π—Ç—ã: {e}]")

async def start_poll(poll):
    try:
        msg = await bot.send_poll(
            chat_id=CHAT_ID,
            question=poll["question"],
            options=poll["options"],
            is_anonymous=False,
            allows_multiple_answers=False
        )
        active_polls[msg.poll.id] = {
            "message_id": msg.message_id,
            "poll": poll,
            "votes": {}
        }
        save_data()
        print(f"[{datetime.now(kaliningrad_tz):%H:%M:%S}] üó≥ –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω: {poll['question']}")
    except Exception as e:
        print(f"[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞: {e}]")

async def send_summary(poll):
    for poll_id, data in list(active_polls.items()):
        if data["poll"] == poll:
            votes = data["votes"]
            yes = [u for u, v in votes.items() if v == "–î–∞ ‚úÖ"]
            no = [u for u, v in votes.items() if v == "–ù–µ—Ç ‚ùå"]

            for user in yes:
                stats.setdefault(user, {"yes": 0, "no": 0})["yes"] += 1
            for user in no:
                stats.setdefault(user, {"yes": 0, "no": 0})["no"] += 1

            text = (
                f"üìä <b>–ò—Ç–æ–≥ –æ–ø—Ä–æ—Å–∞:</b>\n\n"
                f"<b>{poll['question']}</b>\n\n"
                f"‚úÖ –î–∞ ({len(yes)}): {', '.join(yes) or '‚Äî'}\n"
                f"‚ùå –ù–µ—Ç ({len(no)}): {', '.join(no) or '‚Äî'}\n\n"
                f"<i>–í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {len(votes)}</i>"
            )
            await bot.send_message(CHAT_ID, text)
            del active_polls[poll_id]
            save_data()
            break

# === –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
def schedule_polls():
    scheduler.remove_all_jobs()
    loop = asyncio.get_event_loop()  # –≥–ª–∞–≤–Ω—ã–π event loop

    for poll in polls_config:
        tp = list(map(int, poll["time_poll"].split(":")))
        tg = list(map(int, poll["time_game"].split(":")))

        # –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞
        scheduler.add_job(
            lambda p=poll: asyncio.run_coroutine_threadsafe(start_poll(p), loop),
            trigger=CronTrigger(
                day_of_week=poll["day"],
                hour=tp[0],
                minute=tp[1],
                timezone=kaliningrad_tz
            ),
            id=f"poll_{poll['day']}",
            replace_existing=True
        )

        # –ê–≤—Ç–æ-—Å–≤–æ–¥–∫–∞
        hour_before = max(tg[0] - 1, 0)
        next_day = "sat" if poll["day"] == "fri" else poll["day"]

        scheduler.add_job(
            lambda p=poll: asyncio.run_coroutine_threadsafe(send_summary(p), loop),
            trigger=CronTrigger(
                day_of_week=next_day,
                hour=hour_before,
                minute=tg[1],
                timezone=kaliningrad_tz
            ),
            id=f"summary_{poll['day']}",
            replace_existing=True
        )

    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    scheduler.add_job(save_data, "interval", minutes=5, id="autosave", replace_existing=True)
    print("[‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω (Europe/Kaliningrad)]")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.poll_answer_handler()
async def handle_poll_answer(poll_answer: types.PollAnswer):
    user = poll_answer.user.first_name
    option_ids = poll_answer.option_ids
    for poll_id, data in active_polls.items():
        if poll_answer.poll_id == poll_id:
            if not option_ids:
                data["votes"].pop(user, None)
            else:
                choice = data["poll"]["options"][option_ids[0]]
                data["votes"][user] = choice
            save_data()
            break

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("‚úÖ –ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –ì–æ–ª–æ—Å—É–π –≤ –æ–ø—Ä–æ—Å–∞—Ö!")
    schedule_polls()
    if not scheduler.running:
        scheduler.start()
    await message.reply(
        "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–û–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /poll [tue|thu|fri] ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é\n"
        "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤"
    )
    print(f"[{datetime.now(kaliningrad_tz):%H:%M:%S}] /start –æ—Ç {message.from_user.id}")

@dp.message_handler(commands=["poll"])
async def manual_poll(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
    args = message.get_args().strip().lower()
    if args not in ["tue", "thu", "fri"]:
        return await message.answer("‚öôÔ∏è –£–∫–∞–∂–∏ –¥–µ–Ω—å: /poll tue | /poll thu | /poll fri")
    poll = next((p for p in polls_config if p["day"] == args), None)
    if poll:
        await start_poll(poll)
        await message.answer(f"‚úÖ –û–ø—Ä–æ—Å –Ω–∞ {args.upper()} –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é!")

@dp.message_handler(commands=["stats"])
async def cmd_stats(message: types.Message):
    if not stats:
        return await message.answer("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.")
    sorted_players = sorted(stats.items(), key=lambda x: x[1]["yes"], reverse=True)
    top = "\n".join(
        [f"{i+1}. {u} ‚Äî ‚úÖ {d['yes']} / ‚ùå {d['no']}"
         for i, (u, d) in enumerate(sorted_players[:5])]
    )
    await message.answer(f"üìà <b>–¢–û–ü-5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:</b>\n\n{top}", parse_mode="HTML")

# === KEEP-ALIVE ===
async def handle(request):
    return web.Response(text="‚úÖ Bot is alive and running!")

async def start_keepalive_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()
    print("[üåê KeepAlive] Web server started on port", os.getenv("PORT", 8080))

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    load_data()
    await reset_updates()
    schedule_polls()
    scheduler.start()
    await start_keepalive_server()
    print(f"[üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {datetime.now(kaliningrad_tz):%Y-%m-%d %H:%M:%S %Z}]")
    try:
        await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        print(f"[warning] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())








