# -*- coding: utf-8 -*-
import os
import asyncio
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from dotenv import load_dotenv

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN", "8196071953:AAF2wQ19VOkfPKvPfPaG0YoX33eVcWaC_yU")
CHAT_ID = int(os.getenv("TG_CHAT_ID", "-1002841862533"))
ADMIN_ID = int(os.getenv("TG_ADMIN_ID", "914344682"))

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
active_polls = {}

STATS_FILE = "stats.json"
player_stats = {}

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ===
def load_stats():
    global player_stats
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, "r", encoding="utf-8") as f:
                player_stats = json.load(f)
            print(f"[üìä] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(player_stats)} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        except Exception as e:
            print(f"[warning] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            player_stats = {}
    else:
        player_stats = {}

def save_stats():
    try:
        with open(STATS_FILE, "w", encoding="utf-8") as f:
            json.dump(player_stats, f, ensure_ascii=False, indent=2)
        print("[üíæ] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ stats.json")
    except Exception as e:
        print(f"[error] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# === –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤ ===
async def reset_updates():
    try:
        updates = await bot.get_updates()
        if updates:
            last = updates[-1].update_id
            await bot.get_updates(offset=last + 1)
        print("Updates were skipped successfully.")
    except Exception as e:
        print(f"[warning] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∞–ø–¥–µ–π—Ç—ã: {e}")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ ===
polls_config = [
    {
        "day": "tue",
        "time_poll": "10:00",
        "time_game": "20:00",
        "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
        "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ü§î"]
    },
    {
        "day": "thu",
        "time_poll": "10:00",
        "time_game": "20:00",
        "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
        "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ü§î"]
    },
    {
        "day": "fri",
        "time_poll": "21:00",
        "time_game": "12:00",
        "question": "–ó–∞–≤—Ç—Ä–∞ –≤ 12:00 —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ?",
        "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"]
    }
]

# === –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def start_poll(poll):
    try:
        msg = await bot.send_poll(
            chat_id=CHAT_ID,
            question=poll["question"],
            options=poll["options"],
            is_anonymous=False,
            allows_multiple_answers=False
        )
        active_polls[msg.message_id] = {"poll": poll, "answers": {}}
        print(f"[{datetime.now():%H:%M:%S}] üó≥ –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω: {poll['question']}")
        await bot.pin_chat_message(CHAT_ID, msg.message_id, disable_notification=False)
    except Exception as e:
        print(f"[error] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")

async def send_summary(poll):
    poll_id = next((m for m, p in active_polls.items() if p["poll"] == poll), None)
    if not poll_id:
        return
    try:
        poll_data = active_polls[poll_id]
        answers = poll_data["answers"]
        yes_voters = [u for u, ans in answers.items() if ans == "–î–∞ ‚úÖ"]
        no_voters = [u for u, ans in answers.items() if ans == "–ù–µ—Ç ‚ùå"]
        maybe_voters = [u for u, ans in answers.items() if ans == "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ü§î"]

        summary_text = f"üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ –æ–ø—Ä–æ—Å—É:</b>\n{poll['question']}\n\n"
        summary_text += f"‚úÖ <b>–î–∞ ({len(yes_voters)}):</b> {', '.join(yes_voters) or '‚Äî'}\n"
        summary_text += f"‚ùå <b>–ù–µ—Ç ({len(no_voters)}):</b> {', '.join(no_voters) or '‚Äî'}\n"
        summary_text += f"ü§î <b>–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ({len(maybe_voters)}):</b> {', '.join(maybe_voters) or '‚Äî'}"

        await bot.send_message(CHAT_ID, summary_text, parse_mode="HTML")

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for user in yes_voters:
            player_stats[user] = player_stats.get(user, 0) + 1
        save_stats()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞

        del active_polls[poll_id]
        print(f"[{datetime.now():%H:%M:%S}] üìä –°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"[error] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
@dp.poll_answer_handler()
async def handle_poll_answer(poll_answer: types.PollAnswer):
    user_name = poll_answer.user.full_name
    answer = poll_answer.option_ids[0]
    for poll_id, data in active_polls.items():
        if poll_answer.poll_id == data.get("poll_id", poll_id):
            options = data["poll"]["options"]
            selected = options[answer]
            data["answers"][user_name] = selected
            print(f"[vote] {user_name} -> {selected}")
            break

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    schedule_polls()
    if not scheduler.running:
        scheduler.start()
    await message.reply("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!\n"
                        "–û–ø—Ä–æ—Å—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –¥–Ω–∏.\n"
                        "–ö–æ–º–∞–Ω–¥–∞ /poll tue|thu|fri ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é.\n"
                        "–ö–æ–º–∞–Ω–¥–∞ /stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤.")

@dp.message_handler(commands=["poll"])
async def manual_poll(message: types.Message):
    args = message.get_args().strip().lower()
    poll = next((p for p in polls_config if p["day"] == args), None)
    if not poll:
        await message.reply("‚öôÔ∏è –£–∫–∞–∂–∏ –¥–µ–Ω—å: /poll tue | /poll thu | /poll fri")
        return
    await start_poll(poll)
    await message.reply(f"‚úÖ –û–ø—Ä–æ—Å –Ω–∞ {args.upper()} –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é.")

@dp.message_handler(commands=["stats"])
async def cmd_stats(message: types.Message):
    if not player_stats:
        await message.reply("üìâ –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    sorted_players = sorted(player_stats.items(), key=lambda x: x[1], reverse=True)
    top = "\n".join([f"{i+1}. {u} ‚Äî {c} ‚öΩ" for i, (u, c) in enumerate(sorted_players[:5])])
    await message.reply(f"üèÜ <b>–¢–æ–ø-5 –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:</b>\n{top}", parse_mode="HTML")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–ø—Ä–æ—Å–æ–≤ ===
def schedule_polls():
    scheduler.remove_all_jobs()
    for poll in polls_config:
        hour, minute = map(int, poll["time_poll"].split(":"))
        scheduler.add_job(lambda p=poll: asyncio.run_coroutine_threadsafe(start_poll(p), asyncio.get_event_loop()),
                          trigger="cron", day_of_week=poll["day"], hour=hour, minute=minute)
        tg_hour, tg_minute = map(int, poll["time_game"].split(":"))
        scheduler.add_job(lambda p=poll: asyncio.run_coroutine_threadsafe(send_summary(p), asyncio.get_event_loop()),
                          trigger="cron", day_of_week=poll["day"], hour=max(tg_hour - 1, 0), minute=tg_minute)
    # Keep-alive ping –∫–∞–∂–¥—ã–µ 59 –º–∏–Ω—É—Ç
    scheduler.add_job(lambda: asyncio.run_coroutine_threadsafe(bot.get_me(), asyncio.get_event_loop()),
                      trigger=IntervalTrigger(minutes=59))
    print("[‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω]")

# === –ó–∞–ø—É—Å–∫ ===
async def on_startup(dp):
    load_stats()
    await reset_updates()
    schedule_polls()
    scheduler.start()
    print("[üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ]")
    try:
        await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    except:
        pass

if __name__ == "__main__":
    print("[start] Bot is starting...")
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)



