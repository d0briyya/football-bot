# -*- coding: utf-8 -*-
import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN", "8196071953:AAF2wQ19VOkfPKvPfPaG0YoX33eVcWaC_yU")
CHAT_ID = int(os.getenv("TG_CHAT_ID", "-1002841862533"))
ADMIN_ID = int(os.getenv("TG_ADMIN_ID", "914344682"))

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
active_polls = {}

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ ===
polls_config = [
    {
        "day": "tue",
        "time_poll": "10:00",
        "time_game": "20:00",
        "question": "–°–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ —Ñ—É—Ç–±–æ–ª –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫?",
        "options": ["–î–∞", "–ù–µ—Ç", "–ü–æ–¥ ?, –≤ 18:30 –æ—Ç–≤–µ—á—É —Ç–æ—á–Ω–æ"]
    },
    {
        "day": "thu",
        "time_poll": "10:00",
        "time_game": "20:00",
        "question": "–°–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ —Ñ—É—Ç–±–æ–ª –≤ —á–µ—Ç–≤–µ—Ä–≥?",
        "options": ["–î–∞", "–ù–µ—Ç", "–ü–æ–¥ ?, –≤ 18:30 –æ—Ç–≤–µ—á—É —Ç–æ—á–Ω–æ"]
    },
    {
        "day": "sat",
        "time_poll": "21:00",
        "time_game": "12:00",
        "question": "–°–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ —Ñ—É—Ç–±–æ–ª –≤ —Å—É–±–±–æ—Ç—É?",
        "options": ["–î–∞", "–ù–µ—Ç"]
    }
]

# === –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def reset_updates():
    try:
        updates = await bot.get_updates()
        if updates:
            last = updates[-1].update_id
            await bot.get_updates(offset=last + 1)
        print("[‚úÖ –ê–ø–¥–µ–π—Ç—ã –æ—á–∏—â–µ–Ω—ã]")
    except Exception as e:
        print(f"[warning] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∞–ø–¥–µ–π—Ç—ã: {e}")

async def start_poll(poll):
    try:
        msg = await bot.send_poll(
            chat_id=CHAT_ID,
            question=poll["question"],
            options=poll["options"],
            is_anonymous=False,
            allows_multiple_answers=False
        )
        active_polls[msg.message_id] = poll
        print(f"[{datetime.now():%H:%M:%S}] üó≥ –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω: {poll['question']}")
    except Exception as e:
        print(f"[error] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")

async def send_summary(poll):
    poll_id = next((m for m, p in active_polls.items() if p == poll), None)
    if not poll_id:
        print(f"[info] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –¥–ª—è '{poll['question']}'")
        return
    try:
        await bot.forward_message(CHAT_ID, CHAT_ID, poll_id)
        print(f"[{datetime.now():%H:%M:%S}] üìä –°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {poll['question']}")
    except Exception as e:
        print(f"[error] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏: {e}")

def schedule_polls():
    scheduler.remove_all_jobs()
    for poll in polls_config:
        tp = list(map(int, poll["time_poll"].split(":")))
        tg = list(map(int, poll["time_game"].split(":")))
        scheduler.add_job(lambda p=poll: asyncio.create_task(start_poll(p)),
                          trigger="cron", day_of_week=poll["day"],
                          hour=tp[0], minute=tp[1],
                          id=f"poll_{poll['day']}", replace_existing=True)
        scheduler.add_job(lambda p=poll: asyncio.create_task(send_summary(p)),
                          trigger="cron", day_of_week=poll["day"],
                          hour=max(tg[0]-1, 0), minute=tg[1],
                          id=f"summary_{poll['day']}", replace_existing=True)
    print("[‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω]")

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
        return
    schedule_polls()
    if not scheduler.running:
        scheduler.start()
    await message.reply("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ\n"
                        "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω ‚Äî –æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –¥–Ω–∏.\n"
                        "–ö–æ–º–∞–Ω–¥–∞ /summary ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–ø—Ä–æ—Å—ã –≤—Ä—É—á–Ω—É—é.")
    print(f"[{datetime.now():%H:%M:%S}] /start –æ—Ç {message.from_user.id}")

@dp.message_handler(commands=["summary"])
async def cmd_summary(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    if not active_polls:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ —Å–µ–π—á–∞—Å.")
        return
    await message.reply("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:")
    for msg_id in list(active_polls.keys()):
        try:
            await bot.forward_message(message.chat.id, CHAT_ID, msg_id)
        except Exception as e:
            print(f"[warning] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å msg_id={msg_id}: {e}")
            active_polls.pop(msg_id, None)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    await reset_updates()
    schedule_polls()
    scheduler.start()
    print("[üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ]")
    try:
        await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        print(f"[warning] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
