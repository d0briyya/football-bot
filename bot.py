# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è bot.py –¥–ª—è aiogram 2.25.1
–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã:
 - /status, /stats, /nextpoll, /commands
 - –ê–¥–º–∏–Ω: /startpoll, /closepoll, /addplayer, /removeplayer
–£—Å–∏–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤.
"""
import os
import json
import asyncio
import logging
import time
from datetime import datetime, time as dtime, timedelta
import signal
import atexit
from typing import Optional, Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import exceptions
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone
from dotenv import load_dotenv
from aiohttp import web

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN", "YOUR_TOKEN_HERE")
CHAT_ID = int(os.getenv("TG_CHAT_ID", "-1002841862533"))
ADMIN_ID = int(os.getenv("TG_ADMIN_ID", "914344682"))
DATA_FILE = os.getenv("DATA_FILE", "bot_data.json")
PORT = int(os.getenv("PORT", 8080))
LOCK_FILE = "bot.lock"
LOG_FILE = "bot.log"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)
log = logging.getLogger("bot")

# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if TOKEN == "YOUR_TOKEN_HERE" or not TOKEN:
    raise RuntimeError("‚ùå TG_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env! –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞.")

# === –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ===
if os.path.exists(LOCK_FILE):
    log.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω lock-—Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
    time.sleep(5)
    if os.path.exists(LOCK_FILE):
        raise RuntimeError("‚ùå –í—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∑–∞–ø—Ä–µ—â—ë–Ω (lock-—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω).")
with open(LOCK_FILE, "w") as f:
    f.write(str(os.getpid()))
atexit.register(lambda: os.path.exists(LOCK_FILE) and os.remove(LOCK_FILE))

# === Telegram –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ===
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

kaliningrad_tz = timezone("Europe/Kaliningrad")
scheduler = AsyncIOScheduler(timezone=kaliningrad_tz)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ
active_polls = {}  # {poll_id: {"message_id":..., "poll": poll_dict, "votes": {...}, "active": True, "created_at": iso}}
stats = {}         # {name: yes_count}

# === –ö–æ–Ω—Ñ–∏–≥ –æ–ø—Ä–æ—Å–æ–≤ (–∞–≤—Ç–æ) ===
polls_config = [
    {"day": "tue", "time_poll": "09:00", "time_game": "20:00",
     "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
     "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ‚ùî (–æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ)"]},
    {"day": "thu", "time_poll": "09:00", "time_game": "20:00",
     "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
     "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ‚ùî (–æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ)"]},
    {"day": "fri", "time_poll": "21:00", "time_game": "12:00",
     "question": "–ó–∞–≤—Ç—Ä–∞ –≤ 12:00 —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ?",
     "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"]}
]

WEEKDAY_MAP = {
    "mon": 0, "tue": 1, "wed": 2, "thu": 3, "fri": 4, "sat": 5, "sun": 6
}

# === Helpers ===
def now_tz():
    return datetime.now(kaliningrad_tz)

def iso_now():
    return now_tz().isoformat()

def find_last_active_poll() -> Optional[Tuple[str, dict]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (poll_id, data) –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –∏–ª–∏ None."""
    if not active_polls:
        return None
    # –í—ã–±–µ—Ä–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (created_at) –µ—Å–ª–∏ –µ—Å—Ç—å
    items = list(active_polls.items())
    items_sorted = sorted(items, key=lambda it: it[1].get("created_at", ""), reverse=True)
    for pid, data in items_sorted:
        if data.get("active"):
            return pid, data
    return None

def format_poll_votes(data: dict) -> str:
    votes = data.get("votes", {})
    if not votes:
        return "‚Äî –ù–∏–∫—Ç–æ –µ—â—ë –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª."
    lines = []
    for uid, v in votes.items():
        lines.append(f"{v.get('name')} ‚Äî {v.get('answer')}")
    return "\n".join(lines)

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
async def save_data():
    try:
        data = {"active_polls": active_polls, "stats": stats}
        def _write():
            with open(DATA_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        await asyncio.to_thread(_write)
        log.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

async def load_data():
    global active_polls, stats
    try:
        if os.path.exists(DATA_FILE):
            def _read():
                with open(DATA_FILE, "r", encoding="utf-8") as f:
                    return json.load(f)
            data = await asyncio.to_thread(_read)
            active_polls = data.get("active_polls", {})
            stats = data.get("stats", {})
            log.info("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞.")
        else:
            log.info("‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å—Ç–∞—Ä—Ç —Å –Ω—É–ª—è.")
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# === –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram (—Å —Ä–µ—Ç—Ä–∞—è–º–∏) ===
async def safe_telegram_call(func, *args, retries=3, **kwargs):
    for attempt in range(1, retries + 1):
        try:
            return await func(*args, **kwargs)
        except exceptions.RetryAfter as e:
            wait = e.timeout + 1
            log.warning(f"Flood control: —Å–ø–∏–º {wait}s")
            await asyncio.sleep(wait)
        except exceptions.TelegramAPIError as e:
            log.error(f"TelegramAPIError (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
            if attempt == retries:
                try:
                    await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ TelegramAPI: {e}")
                except Exception:
                    pass
                return None
            await asyncio.sleep(2 * attempt)
        except Exception as e:
            log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram: {e}")
            if attempt == retries:
                return None
            await asyncio.sleep(2 * attempt)

# === –û—á–∏—Å—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤ ===
async def reset_updates():
    try:
        await safe_telegram_call(bot.get_updates, offset=-1)
        log.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        log.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–ø–¥–µ–π—Ç–æ–≤: {e}")

# === –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ ===
async def start_poll(poll: dict, from_admin=False):
    try:
        options = poll.get("options") or []
        if not options or len(options) < 2:
            log.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞.")
            return
        msg = await safe_telegram_call(bot.send_poll,
            chat_id=CHAT_ID,
            question=poll["question"],
            options=options,
            is_anonymous=False,
            allows_multiple_answers=False
        )
        if not msg:
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å.")
            return
        poll_id = msg.poll.id
        active_polls[poll_id] = {
            "message_id": msg.message_id,
            "poll": poll,
            "votes": {},
            "active": True,
            "created_at": iso_now()
        }
        await save_data()
        # –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω—Å
        await safe_telegram_call(bot.pin_chat_message, chat_id=CHAT_ID, message_id=msg.message_id, disable_notification=True)
        await safe_telegram_call(bot.send_message, CHAT_ID, "üì¢ <b>–ù–æ–≤—ã–π –æ–ø—Ä–æ—Å!</b>\n–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ üëá")
        if from_admin:
            await safe_telegram_call(bot.send_message, ADMIN_ID, f"‚úÖ –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é: {poll['question']}")
        log.info(f"üó≥ –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω: {poll['question']}")
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")

# === –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤ (–æ—á–∏—Å—Ç–∫–∞ reply_markup –¥–ª—è —Å—Ç–∞—Ä—ã—Ö) ===
async def restore_active_polls():
    if not active_polls:
        return
    cleaned = []
    for poll_id, data in list(active_polls.items()):
        try:
            msg_id = data.get("message_id")
            try:
                await safe_telegram_call(bot.edit_message_reply_markup, chat_id=CHAT_ID, message_id=msg_id, reply_markup=None)
            except exceptions.BadRequest:
                # —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ —É–¥–∞–ª–∏—Ç—å—Å—è
                del active_polls[poll_id]
                cleaned.append(poll_id)
        except Exception as e:
            log.warning(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {poll_id}: {e}")
            del active_polls[poll_id]
            cleaned.append(poll_id)
    if cleaned:
        log.info(f"üóë –£–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –æ–ø—Ä–æ—Å—ã: {cleaned}")
        await save_data()

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
async def remind_if_needed():
    now = now_tz()
    if not (dtime(9, 0) <= now.time() <= dtime(19, 0)):
        return
    weekday = now.strftime("%a").lower()
    if weekday not in ["tue", "thu"]:
        return
    for data in active_polls.values():
        if not data.get("active"):
            continue
        yes_count = sum(1 for v in data["votes"].values() if v["answer"].startswith("–î–∞"))
        if yes_count < 10:
            await safe_telegram_call(bot.send_message,
                CHAT_ID,
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ {yes_count} —á–µ–ª–æ–≤–µ–∫(–∞) –æ—Ç–≤–µ—Ç–∏–ª–∏ '–î–∞ ‚úÖ'. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!"
            )
            log.info(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({yes_count} '–î–∞')")

# === –ò—Ç–æ–≥–∏ ===
async def send_summary(poll):
    # –Ω–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π poll_id
    for poll_id, data in list(active_polls.items()):
        try:
            if data["poll"] == poll:
                data["active"] = False
                votes = data.get("votes", {})
                yes_users = [v["name"] for v in votes.values() if v["answer"].startswith("–î–∞")]
                no_users = [v["name"] for v in votes.values() if v["answer"].startswith("–ù–µ—Ç")]
                total_yes = len(yes_users)
                poll_day = poll.get("day")
                if poll_day == "fri":
                    status = "üìä –ò—Ç–æ–≥ —Å—É–±–±–æ—Ç–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞:"
                else:
                    status = (
                        "‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º—Å—è ‚Äî –º–µ–Ω—å—à–µ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                        if total_yes < 10 else
                        "‚úÖ –°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ! ‚öΩ"
                    )
                text = (
                    f"<b>{poll['question']}</b>\n\n"
                    f"‚úÖ –î–∞ ({len(yes_users)}): {', '.join(yes_users) or '‚Äî'}\n"
                    f"‚ùå –ù–µ—Ç ({len(no_users)}): {', '.join(no_users) or '‚Äî'}\n\n"
                    f"{status}\n\n<i>–í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {len(votes)}</i>"
                )
                await safe_telegram_call(bot.send_message, CHAT_ID, text)
                for v in votes.values():
                    if v["answer"].startswith("–î–∞"):
                        stats[v["name"]] = stats.get(v["name"], 0) + 1
                del active_polls[poll_id]
                await save_data()
                log.info(f"üìà –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {poll['question']}")
                break
        except Exception as e:
            log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–∞ –æ–ø—Ä–æ—Å–∞: {e}")
            if poll_id in active_polls:
                del active_polls[poll_id]

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ===
@dp.poll_answer_handler()
async def handle_poll_answer(poll_answer: types.PollAnswer):
    try:
        uid = poll_answer.user.id
        uname = poll_answer.user.first_name or poll_answer.user.username or str(uid)
        option_ids = poll_answer.option_ids
        for poll_id, data in active_polls.items():
            if poll_answer.poll_id == poll_id:
                if not option_ids:
                    data["votes"].pop(str(uid), None)
                else:
                    answer = data["poll"]["options"][option_ids[0]]
                    data["votes"][str(uid)] = {"name": uname, "answer": answer}
                await save_data()
                return
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –≤ handle_poll_answer: {e}")

# === –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ.\n"
        "–ù–∞–ø–∏—à–∏ /commands —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
    )

@dp.message_handler(commands=["commands"])
async def cmd_commands(message: types.Message):
    text = (
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        "/status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –∏ –∫—Ç–æ —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª.\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ¬´–î–∞ ‚úÖ¬ª –ø–æ –∏–º–µ–Ω–∞–º.\n"
        "/nextpoll ‚Äî –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.\n"
        "/commands ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞.\n\n"
        "–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (ADMIN_ID):\n"
        "/startpoll –í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç1 | –í–∞—Ä–∏–∞–Ω—Ç2 | ... ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é.\n"
        "  –ü—Ä–∏–º–µ—Ä: /startpoll –°–µ–≥–æ–¥–Ω—è –≤ 19:00? | –î–∞ | –ù–µ—Ç | –ú–æ–∂–µ—Ç –±—ã—Ç—å\n"
        "/closepoll ‚Äî –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥.\n"
        "/addplayer –ò–º—è ‚Äî –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ ¬´–î–∞ ‚úÖ¬ª.\n"
        "/removeplayer –ò–º—è ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.\n\n"
        "–ê–≤—Ç–æ-–æ–ø—Ä–æ—Å—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–∑ polls_config."
    )
    await message.reply(text)

@dp.message_handler(commands=["status"])
async def cmd_status(message: types.Message):
    last = find_last_active_poll()
    if not last:
        return await message.reply("üì≠ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.")
    _, data = last
    poll = data["poll"]
    text = (
        f"<b>{poll.get('question')}</b>\n\n"
        f"{format_poll_votes(data)}"
    )
    await message.reply(text)

@dp.message_handler(commands=["stats"])
async def cmd_stats(message: types.Message):
    if not stats:
        return await message.reply("üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ '–î–∞'.")
    text = "\n".join([f"{name}: {count}" for name, count in sorted(stats.items(), key=lambda x: -x[1])])
    await message.reply(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ¬´–î–∞ ‚úÖ¬ª –ø–æ –∏–º–µ–Ω–∞–º:\n{text}")

@dp.message_handler(commands=["nextpoll"])
async def cmd_nextpoll(message: types.Message):
    nxt = compute_next_poll_datetime()
    if not nxt:
        return await message.reply("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
    dt, cfg = nxt
    fmt = dt.strftime("%Y-%m-%d %H:%M %Z")
    await message.reply(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å: <b>{cfg['question']}</b>\n–ö–æ–≥–¥–∞: {fmt}")

# === –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã ===
def is_admin(user_id: int) -> bool:
    return int(user_id) == int(ADMIN_ID)

@dp.message_handler(commands=["startpoll"])
async def cmd_startpoll(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    text = message.get_args()
    if not text:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/startpoll –í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç1 | –í–∞—Ä–∏–∞–Ω—Ç2 | ...")
    parts = [p.strip() for p in text.split("|") if p.strip()]
    if len(parts) < 3:
        return await message.reply("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º: –í–æ–ø—Ä–æ—Å –∏ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞. –ü—Ä–∏–º–µ—Ä:\n/startpoll –°–µ–≥–æ–¥–Ω—è –≤ 19:00? | –î–∞ | –ù–µ—Ç")
    question = parts[0]
    options = parts[1:]
    if len(options) < 2 or len(options) > 10:
        return await message.reply("Telegram —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –æ—Ç 2 –¥–æ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    poll = {"day": "manual", "time_poll": now_tz().strftime("%H:%M"), "time_game": now_tz().strftime("%H:%M"),
            "question": question, "options": options}
    await start_poll(poll, from_admin=True)
    await message.reply("‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é.")

@dp.message_handler(commands=["closepoll"])
async def cmd_closepoll(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    last = find_last_active_poll()
    if not last:
        return await message.reply("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
    _, data = last
    try:
        await send_summary(data["poll"])
        await message.reply("‚úÖ –û–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç –∏ –∏—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø—Ä–æ—Å–∞.")

@dp.message_handler(commands=["addplayer"])
async def cmd_addplayer(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    name = message.get_args().strip()
    if not name:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addplayer –ò–º—è")
    last = find_last_active_poll()
    if not last:
        return await message.reply("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞.")
    pid, data = last
    # –î–æ–±–∞–≤–∏–º –∫–∞–∫ "–î–∞ ‚úÖ"
    data["votes"][f"admin_{name}"] = {"name": name, "answer": "–î–∞ ‚úÖ (–¥–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é)"}
    # –Ω–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏–º stats —Å—Ä–∞–∑—É ‚Äî –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤
    await save_data()
    await message.reply(f"‚úÖ –ò–≥—Ä–æ–∫ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ '–î–∞ ‚úÖ'.")

@dp.message_handler(commands=["removeplayer"])
async def cmd_removeplayer(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    name = message.get_args().strip()
    if not name:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeplayer –ò–º—è")
    last = find_last_active_poll()
    if not last:
        return await message.reply("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
    pid, data = last
    removed = False
    for uid, v in list(data["votes"].items()):
        if v.get("name") == name:
            del data["votes"][uid]
            removed = True
    if removed:
        await save_data()
        await message.reply(f"‚úÖ –ò–≥—Ä–æ–∫ '{name}' —É–¥–∞–ª—ë–Ω –∏–∑ –≥–æ–ª–æ—Å–æ–≤.")
    else:
        await message.reply(f"‚ÑπÔ∏è –ò–≥—Ä–æ–∫ —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö.")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
def schedule_polls():
    scheduler.remove_all_jobs()
    loop = asyncio.get_event_loop()
    for poll in polls_config:
        try:
            tp = list(map(int, poll["time_poll"].split(":")))
            tg = list(map(int, poll["time_game"].split(":")))
            scheduler.add_job(
                lambda p=poll: asyncio.run_coroutine_threadsafe(start_poll(p), loop),
                trigger=CronTrigger(day_of_week=poll["day"], hour=tp[0], minute=tp[1]),
                id=f"poll_{poll['day']}", replace_existing=True
            )
            next_day = "sat" if poll["day"] == "fri" else poll["day"]
            scheduler.add_job(
                lambda p=poll: asyncio.run_coroutine_threadsafe(send_summary(p), loop),
                trigger=CronTrigger(day_of_week=next_day, hour=max(tg[0] - 1, 0), minute=tg[1]),
                id=f"summary_{poll['day']}", replace_existing=True
            )
        except Exception as e:
            log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è {poll}: {e}")
    scheduler.add_job(lambda: asyncio.run_coroutine_threadsafe(remind_if_needed(), loop),
                      "interval", hours=2, id="reminder", replace_existing=True)
    scheduler.add_job(lambda: asyncio.run_coroutine_threadsafe(save_data(), loop),
                      "interval", minutes=5, id="autosave", replace_existing=True)
    log.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω (Europe/Kaliningrad)")

# === Compute next poll datetime helper ===
def compute_next_poll_datetime() -> Optional[Tuple[datetime, dict]]:
    now = now_tz()
    candidates = []
    for cfg in polls_config:
        day = cfg.get("day")
        t_str = cfg.get("time_poll", "00:00")
        try:
            hour, minute = map(int, t_str.split(":"))
        except Exception:
            hour, minute = 0, 0
        if day not in WEEKDAY_MAP:
            continue
        target_weekday = WEEKDAY_MAP[day]
        days_ahead = (target_weekday - now.weekday()) % 7
        candidate = datetime(now.year, now.month, now.day, hour, minute, tzinfo=kaliningrad_tz) + timedelta(days=days_ahead)
        if candidate <= now:
            candidate += timedelta(days=7)
        candidates.append((candidate, cfg))
    if not candidates:
        return None
    candidates.sort(key=lambda it: it[0])
    return candidates[0]

# === Keep-alive server ===
async def handle(request):
    return web.Response(text="‚úÖ Bot is alive and running!")

async def start_keepalive_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    log.info("üåê KeepAlive server started.")

# === Error handler (–≥–ª–æ–±–∞–ª—å–Ω—ã–π) ===
@dp.errors_handler()
async def global_error_handler(update, exception):
    try:
        log.exception(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {exception} ‚Äî update: {update}")
        # —É–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ
        await safe_telegram_call(bot.send_message, ADMIN_ID, f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–æ—Ç–µ: {exception}")
    except Exception:
        pass
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True ‚Äî —á—Ç–æ–±—ã aiogram –Ω–µ –ª–æ–≥–∞–ª –ª–∏—à–Ω–∏–π —Ç—Ä–µ–π—Å
    return True

# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
async def shutdown():
    log.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    try:
        await save_data()
    except Exception:
        pass
    try:
        scheduler.shutdown(wait=False)
    except Exception:
        pass
    try:
        await bot.close()
    except Exception:
        pass
    log.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    await load_data()
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        log.info("üîÅ Webhook —É–¥–∞–ª—ë–Ω, polling –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e}")
    try:
        await reset_updates()
    except Exception as e:
        log.warning(f"–û—à–∏–±–∫–∞ reset_updates: {e}")
    schedule_polls()
    scheduler.start()
    await restore_active_polls()
    await start_keepalive_server()
    log.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {datetime.now(kaliningrad_tz):%Y-%m-%d %H:%M:%S %Z}")
    try:
        await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    except Exception:
        pass
    loop = asyncio.get_event_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, lambda s=sig: asyncio.create_task(shutdown()))
        except NotImplementedError:
            pass
    await dp.start_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        log.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        # –ù–µ –∑–∞–±—ã–≤–∞–µ–º —É–¥–∞–ª–∏—Ç—å lock –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –ø–∞–¥–µ–Ω–∏–∏
        if os.path.exists(LOCK_FILE):
            os.remove(LOCK_FILE)
        raise




