# -*- coding: utf-8 -*-
import os
import json
import asyncio
import functools
from datetime import datetime, time as dtime
import signal

from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import exceptions
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone
from dotenv import load_dotenv
from aiohttp import web

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN", "YOUR_TOKEN_HERE")
CHAT_ID = int(os.getenv("TG_CHAT_ID", "-1002841862533"))
ADMIN_ID = int(os.getenv("TG_ADMIN_ID", "914344682"))
DATA_FILE = os.getenv("DATA_FILE", "bot_data.json")
PORT = int(os.getenv("PORT", 8080))

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

kaliningrad_tz = timezone("Europe/Kaliningrad")
scheduler = AsyncIOScheduler(timezone=kaliningrad_tz)

# —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
# active_polls: { poll_id(str): { "message_id": int, "poll": {...}, "votes": {uid_or_manual: {"name": str, "answer": str}}, "active": bool } }
active_polls = {}
stats = {}

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ===
polls_config = [
    {"day": "tue", "time_poll": "09:00", "time_game": "20:00",
     "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
     "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ‚ùî (–æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ)"]},
    {"day": "thu", "time_poll": "09:00", "time_game": "20:00",
     "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
     "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ‚ùî (–æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ)"]},
    {"day": "fri", "time_poll": "21:00", "time_game": "12:00",
     "question": "–ó–∞–≤—Ç—Ä–∞ –≤ 12:00 —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ?",
     "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"]}
]

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
async def save_data():
    try:
        data = {"active_polls": active_polls, "stats": stats}
        def _write():
            with open(DATA_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        await asyncio.to_thread(_write)
        print(f"[üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã {datetime.now(kaliningrad_tz):%H:%M:%S}]")
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}]")

async def load_data():
    global active_polls, stats
    try:
        if os.path.exists(DATA_FILE):
            def _read():
                with open(DATA_FILE, "r", encoding="utf-8") as f:
                    return json.load(f)
            data = await asyncio.to_thread(_read)
            active_polls = data.get("active_polls", {})
            stats = data.get("stats", {})
            print("[‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞]")
        else:
            print("[‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å—Ç–∞—Ä—Ç —Å –Ω—É–ª—è]")
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}]")

# === –°–±—Ä–æ—Å –∞–ø–¥–µ–π—Ç–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ) ===
async def reset_updates():
    try:
        updates = await bot.get_updates()
        if updates:
            await bot.get_updates(offset=updates[-1].update_id + 1)
        print("[‚úÖ –ê–ø–¥–µ–π—Ç—ã –æ—á–∏—â–µ–Ω—ã]")
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–æ–≤: {e}]")

# === –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ (–ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ) ===
async def start_poll(poll: dict, from_admin=False):
    """
    poll: {"question": str, "options": [str..], "day": "tue"/... (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ), "time_poll": "HH:MM" (–æ–ø—Ü)}
    from_admin: –µ—Å–ª–∏ True ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    """
    try:
        msg = await bot.send_poll(
            chat_id=CHAT_ID,
            question=poll["question"],
            options=poll["options"],
            is_anonymous=False,
            allows_multiple_answers=False
        )
        poll_id = msg.poll.id  # —Å—Ç—Ä–æ–∫–∞
        active_polls[poll_id] = {
            "message_id": msg.message_id,
            "poll": poll,
            "votes": {},
            "active": True
        }
        await save_data()

        # –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä–µ–ø–∏—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
        try:
            await bot.pin_chat_message(chat_id=CHAT_ID, message_id=msg.message_id, disable_notification=True)
        except exceptions.TelegramAPIError:
            pass

        await bot.send_message(CHAT_ID, "üì¢ <b>–ù–æ–≤—ã–π –æ–ø—Ä–æ—Å!</b>\n–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ üëá")
        if from_admin:
            await bot.send_message(ADMIN_ID, f"‚úÖ –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é: {poll['question']}")
        print(f"[üó≥ –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω: {poll['question']}]")
    except Exception as e:
        print(f"[‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞: {e}]")

# === –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ "–ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å") ===
async def restore_active_polls():
    if not active_polls:
        return
    restored = []
    removed = []
    for poll_id, data in list(active_polls.items()):
        try:
            msg_id = data.get("message_id")
            # –ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å "–º—è–≥–∫–∏–π" –∑–∞–ø—Ä–æ—Å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é: edit_message_reply_markup –≤–µ—Ä–Ω—ë—Ç –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç
            try:
                await bot.edit_message_reply_markup(chat_id=CHAT_ID, message_id=msg_id, reply_markup=None)
                restored.append((poll_id, msg_id))
            except exceptions.BadRequest as br:
                # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –æ—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å
                err_text = str(br)
                if "message to edit not found" in err_text or "message can't be edited" in err_text or "message is not modified" in err_text:
                    # –ø—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ ‚Äî —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
                    del active_polls[poll_id]
                    removed.append((poll_id, "message not found/edited"))
                else:
                    restored.append((poll_id, msg_id))
            except exceptions.TelegramAPIError:
                # –æ–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ‚Äî —É–¥–∞–ª–∏–º –ø—Ä–∏–≤—è–∑–∫—É (–Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –æ–ø—Ä–æ—Å –∂–∏–≤)
                del active_polls[poll_id]
                removed.append((poll_id, "telegram api error"))
        except Exception as e:
            print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ {poll_id}: {e}]")
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∑–∞–ø–∏—Å—å
            if poll_id in active_polls:
                del active_polls[poll_id]
            removed.append((poll_id, "unknown error"))

    if restored:
        print(f"[üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–ø—Ä–æ—Å—ã: {restored}]")
    if removed:
        print(f"[üóë –£–¥–∞–ª–µ–Ω—ã/–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ–ø—Ä–æ—Å—ã: {removed}]")
    await save_data()

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –≤—Ç/—á—Ç 9‚Äì19 –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –µ—Å–ª–∏ '–î–∞' < 10 ===
async def remind_if_needed():
    now = datetime.now(kaliningrad_tz)
    if not (dtime(9, 0) <= now.time() <= dtime(19, 0)):
        return
    weekday = now.strftime("%a").lower()
    if weekday not in ["tue", "thu"]:
        return

    for poll_id, data in active_polls.items():
        if not data.get("active", False):
            continue
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å (–µ—Å–ª–∏ poll —Å–æ–¥–µ—Ä–∂–∏—Ç "day")
        poll_day = data.get("poll", {}).get("day")
        if poll_day and poll_day != weekday:
            continue
        yes_count = sum(1 for v in data["votes"].values() if v["answer"] == "–î–∞ ‚úÖ")
        if yes_count < 10:
            try:
                await bot.send_message(
                    CHAT_ID,
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ {yes_count} —á–µ–ª–æ–≤–µ–∫(–∞) –æ—Ç–≤–µ—Ç–∏–ª–∏ '–î–∞ ‚úÖ'. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!"
                )
                print(f"[üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({yes_count} '–î–∞')]")
            except Exception:
                print("[‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ]")

# === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ===
async def send_summary(poll):
    # –Ω–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
    for poll_id, data in list(active_polls.items()):
        if data["poll"] == poll:
            data["active"] = False
            votes = data.get("votes", {})
            yes_users = [v["name"] for v in votes.values() if v["answer"] == "–î–∞ ‚úÖ"]
            no_users = [v["name"] for v in votes.values() if v["answer"] == "–ù–µ—Ç ‚ùå"]

            try:
                await bot.unpin_chat_message(chat_id=CHAT_ID, message_id=data["message_id"])
            except exceptions.TelegramAPIError:
                pass

            total_yes = len(yes_users)
            poll_day = poll.get("day")

            # –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –ø—è—Ç–Ω–∏—á–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ (–∏—Ç–æ–≥ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ —Å—É–±–±–æ—Ç—É ‚Äî –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è)
            if poll_day == "fri":
                text = (
                    "üìä <b>–ò—Ç–æ–≥ –æ–ø—Ä–æ—Å–∞ (—Å—É–±–±–æ—Ç–∞):</b>\n\n"
                    f"<b>{poll['question']}</b>\n\n"
                    f"‚úÖ –î–∞ ({total_yes}): {', '.join(yes_users) or '‚Äî'}\n"
                    f"‚ùå –ù–µ—Ç ({len(no_users)}): {', '.join(no_users) or '‚Äî'}\n\n"
                    f"‚ÑπÔ∏è –ó–∞ '–î–∞' –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ <b>{total_yes}</b> —á–µ–ª–æ–≤–µ–∫(–∞).\n"
                    f"–†–µ—à–∞–π—Ç–µ —Å–∞–º–∏, —Å—Ç–æ–∏—Ç –ª–∏ –∏–¥—Ç–∏ ‚Äî –ø–æ —Å—É–±–±–æ—Ç–∞–º –º–Ω–æ–≥–∏–µ —Ö–æ–¥—è—Ç –±–µ–∑ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∫–∏.\n"
                    f"<i>–û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –ª–∏—à—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏.</i>\n\n"
                    f"<i>–í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {len(votes)}</i>"
                )
            else:
                status = (
                    "‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –Ω–∞ —Ñ—É—Ç–±–æ–ª <b>–Ω–µ —Å–æ–±–∏—Ä–∞–µ–º—Å—è</b> ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ 10."
                    if total_yes < 10 else
                    "‚úÖ –°–µ–≥–æ–¥–Ω—è <b>—Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ</b>! ‚öΩ"
                )
                text = (
                    "üìä <b>–ò—Ç–æ–≥ –æ–ø—Ä–æ—Å–∞:</b>\n\n"
                    f"<b>{poll['question']}</b>\n\n"
                    f"‚úÖ –î–∞ ({total_yes}): {', '.join(yes_users) or '‚Äî'}\n"
                    f"‚ùå –ù–µ—Ç ({len(no_users)}): {', '.join(no_users) or '‚Äî'}\n\n"
                    f"{status}\n\n"
                    f"<i>–í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {len(votes)}</i>"
                )
            try:
                await bot.send_message(CHAT_ID, text)
            except exceptions.TelegramAPIError:
                pass

            # –æ–±–Ω–æ–≤–ª—è–µ–º stats
            for v in votes.values():
                if v["answer"] == "–î–∞ ‚úÖ":
                    stats[v["name"]] = stats.get(v["name"], 0) + 1

            del active_polls[poll_id]
            await save_data()
            print(f"[üìà –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {poll['question']}]")
            break

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏) ===
@dp.poll_answer_handler()
async def handle_poll_answer(poll_answer: types.PollAnswer):
    uid = poll_answer.user.id
    uname = poll_answer.user.first_name or poll_answer.user.username or str(uid)
    option_ids = poll_answer.option_ids
    for poll_id, data in active_polls.items():
        if poll_answer.poll_id == poll_id:
            if not option_ids:
                # —Å–Ω—è–ª –≥–æ–ª–æ—Å
                data["votes"].pop(str(uid), None)
            else:
                answer = data["poll"]["options"][option_ids[0]]
                data["votes"][str(uid)] = {"name": uname, "answer": answer}
            await save_data()
            return

# === –ö–æ–º–∞–Ω–¥—ã: –∞–¥–º–∏–Ω—Å–∫–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ ===

# /addplayer –ò–º—è
@dp.message_handler(commands=["addplayer"])
async def cmd_addplayer(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤.")
    name = message.get_args().strip()
    if not name:
        return await message.reply("‚úçÔ∏è –£–∫–∞–∂–∏ –∏–º—è: /addplayer –í–∞—Å—è")
    if not active_polls:
        return await message.reply("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
    # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π
    poll_id, data = list(active_polls.items())[-1]
    key = f"manual_{len([k for k in data['votes'] if str(k).startswith('manual_')]) + 1}"
    data["votes"][key] = {"name": name, "answer": "–î–∞ ‚úÖ"}
    await save_data()
    yes_users = [v["name"] for v in data["votes"].values() if v["answer"] == "–î–∞ ‚úÖ"]
    await bot.send_message(CHAT_ID, f"‚úÖ <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ '–î–∞ ‚úÖ'.\n<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ (–î–∞):</b> {', '.join(yes_users)}")

# /removeplayer –ò–º—è
@dp.message_handler(commands=["removeplayer"])
async def cmd_removeplayer(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤.")
    name = message.get_args().strip()
    if not name:
        return await message.reply("‚úçÔ∏è –£–∫–∞–∂–∏ –∏–º—è: /removeplayer –í–∞—Å—è")
    if not active_polls:
        return await message.reply("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
    poll_id, data = list(active_polls.items())[-1]
    removed = False
    for key in list(data["votes"].keys()):
        if str(key).startswith("manual_") and data["votes"][key]["name"].lower() == name.lower():
            del data["votes"][key]
            removed = True
            break
    if not removed:
        return await message.reply(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö.", parse_mode="HTML")
    await save_data()
    yes_users = [v["name"] for v in data["votes"].values() if v["answer"] == "–î–∞ ‚úÖ"]
    await bot.send_message(CHAT_ID, f"‚ùå <b>{name}</b> —É–¥–∞–ª—ë–Ω.\n<b>–û—Å—Ç–∞–ª–∏—Å—å (–î–∞):</b> {', '.join(yes_users) or '‚Äî'}")

# /status
@dp.message_handler(commands=["status"])
async def cmd_status(message: types.Message):
    if not active_polls:
        return await message.reply("‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
    poll_id, data = list(active_polls.items())[-1]
    yes_users = [v["name"] for v in data["votes"].values() if v["answer"] == "–î–∞ ‚úÖ"]
    no_users = [v["name"] for v in data["votes"].values() if v["answer"] == "–ù–µ—Ç ‚ùå"]
    await message.reply(
        f"üìä <b>–°—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞:</b>\n\n"
        f"<b>{data['poll']['question']}</b>\n\n"
        f"‚úÖ –î–∞ ({len(yes_users)}): {', '.join(yes_users) or '‚Äî'}\n"
        f"‚ùå –ù–µ—Ç ({len(no_users)}): {', '.join(no_users) or '‚Äî'}",
        parse_mode=ParseMode.HTML
    )

# /stats
@dp.message_handler(commands=["stats"])
async def cmd_stats(message: types.Message):
    if not stats:
        return await message.reply("‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (–î–∞ ‚úÖ):</b>\n\n"
    sorted_stats = sorted(stats.items(), key=lambda x: x[1], reverse=True)
    for name, count in sorted_stats:
        text += f"‚Ä¢ {name}: {count} —Ä–∞–∑(–∞)\n"
    await message.reply(text, parse_mode=ParseMode.HTML)

# /nextpoll
@dp.message_handler(commands=["nextpoll"])
async def cmd_nextpoll(message: types.Message):
    jobs = [job for job in scheduler.get_jobs() if job.id.startswith("poll_")]
    if not jobs:
        return await message.reply("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
    next_jobs = sorted(jobs, key=lambda j: j.next_run_time or datetime.max)
    next_time = next_jobs[0].next_run_time
    if next_time is None:
        return await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞.")
    await message.reply(f"üïì <b>–°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å:</b> {next_time.strftime('%A, %d %B %H:%M')} (–ø–æ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—É)")

# /startpoll - –∞–¥–º–∏–Ω –≤—Ä—É—á–Ω—É—é —Å–æ–∑–¥–∞—ë—Ç –æ–ø—Ä–æ—Å
# —Ñ–æ—Ä–º–∞—Ç: /startpoll –í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç1 | –í–∞—Ä–∏–∞–Ω—Ç2 | –í–∞—Ä–∏–∞–Ω—Ç3
@dp.message_handler(commands=["startpoll"])
async def cmd_startpoll(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–ø—Ä–æ—Å—ã –≤—Ä—É—á–Ω—É—é.")
    args = message.get_args().strip()
    if not args:
        return await message.reply("‚úçÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /startpoll –í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç1 | –í–∞—Ä–∏–∞–Ω—Ç2 | ...")
    parts = [p.strip() for p in args.split("|") if p.strip()]
    if len(parts) < 2:
        return await message.reply("‚ö†Ô∏è –ù—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å –∏ –º–∏–Ω–∏–º—É–º 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞. –§–æ—Ä–º–∞—Ç: /startpoll –í–æ–ø—Ä–æ—Å | –î–∞ | –ù–µ—Ç")
    question = parts[0]
    options = parts[1:]
    poll = {"question": question, "options": options, "day": None}
    await start_poll(poll, from_admin=True)

# /closepoll - –∞–¥–º–∏–Ω –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å (–ø–æ–¥–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏)
@dp.message_handler(commands=["closepoll"])
async def cmd_closepoll(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã.")
    if not active_polls:
        return await message.reply("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
    # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
    poll_id, data = list(active_polls.items())[-1]
    await send_summary(data["poll"])
    await message.reply("‚úÖ –û–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏—Ç–æ–≥–∏.")

# /commands - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=["commands"])
async def cmd_help(message: types.Message):
    text = (
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üë• <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö:</b>\n"
        "‚Ä¢ /status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –∏ –∫—Ç–æ —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª\n"
        "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '–î–∞' –ø–æ –∏–º–µ–Ω–∞–º\n"
        "‚Ä¢ /nextpoll ‚Äî –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞\n"
        "‚Ä¢ /commands ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "‚öôÔ∏è <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        "‚Ä¢ /startpoll –í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç1 | –í–∞—Ä–∏–∞–Ω—Ç2 ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é\n"
        "‚Ä¢ /closepoll ‚Äî –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–∏\n"
        "‚Ä¢ /addplayer –ò–º—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤—Ä—É—á–Ω—É—é (–î–∞ ‚úÖ)\n"
        "‚Ä¢ /removeplayer –ò–º—è ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ\n\n"
        "üóìÔ∏è <b>–ê–≤—Ç–æ–æ–ø—Ä–æ—Å—ã:</b>\n"
        "‚Ä¢ –í—Ç–æ—Ä–Ω–∏–∫ –∏ –ß–µ—Ç–≤–µ—Ä–≥ ‚Äî 9:00 (–∏–≥—Ä–∞ –≤ 20:00)\n"
        "‚Ä¢ –ü—è—Ç–Ω–∏—Ü–∞ ‚Äî 21:00 (–∏–≥—Ä–∞ –≤ —Å—É–±–±–æ—Ç—É 12:00)\n"
    )
    await message.reply(text, parse_mode=ParseMode.HTML)

# === –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ (–Ω–µ –º–µ—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞–º) ===
@dp.message_handler(lambda m: not (m.text and m.text.startswith("/")))
async def debug_all(message: types.Message):
    # –ª–æ–≥–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –∫–æ–º–∞–Ω–¥)
    print(f"[MSG] {message.from_user.id} | {message.text}")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
def schedule_polls():
    scheduler.remove_all_jobs()
    loop = asyncio.get_event_loop()
    for poll in polls_config:
        tp = list(map(int, poll["time_poll"].split(":")))
        tg = list(map(int, poll["time_game"].split(":")))
        # —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞
        scheduler.add_job(
            functools.partial(asyncio.run_coroutine_threadsafe, start_poll(poll), loop),
            trigger=CronTrigger(day_of_week=poll["day"], hour=tp[0], minute=tp[1], timezone=kaliningrad_tz),
            id=f"poll_{poll['day']}", replace_existing=True
        )
        # –∏—Ç–æ–≥: –∑–∞ 1 —á–∞—Å –¥–æ –∏–≥—Ä—ã (hour_before: tg[0]-1)
        hour_before = max(tg[0] - 1, 0)
        next_day = "sat" if poll["day"] == "fri" else poll["day"]
        scheduler.add_job(
            functools.partial(asyncio.run_coroutine_threadsafe, send_summary(poll), loop),
            trigger=CronTrigger(day_of_week=next_day, hour=hour_before, minute=tg[1], timezone=kaliningrad_tz),
            id=f"summary_{poll['day']}", replace_existing=True
        )
    # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    scheduler.add_job(lambda: asyncio.run_coroutine_threadsafe(remind_if_needed(), loop),
                      "interval", hours=2, id="reminder", replace_existing=True)
    # –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    scheduler.add_job(lambda: asyncio.run_coroutine_threadsafe(save_data(), loop),
                      "interval", minutes=5, id="autosave", replace_existing=True)
    print("[‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω (Europe/Kaliningrad)]")

# === Keep-alive HTTP ===
async def handle(request):
    return web.Response(text="‚úÖ Bot is alive and running!")

async def start_keepalive_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    print("[üåê KeepAlive server started]")

# === Graceful shutdown ===
async def shutdown():
    print("[üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...]")
    try:
        await save_data()
    except Exception:
        pass
    try:
        scheduler.shutdown(wait=False)
    except Exception:
        pass
    try:
        await bot.close()
    except Exception:
        pass
    print("[‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω]")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    await load_data()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã polling –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–ª –∞–ø–¥–µ–π—Ç—ã.
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("[üîÅ Webhook —É–¥–∞–ª—ë–Ω (drop_pending_updates=True). Polling –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω]")
    except Exception as e:
        print(f"[‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e}]")

    try:
        await reset_updates()
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ reset_updates: {e}]")

    schedule_polls()
    scheduler.start()

    try:
        await restore_active_polls()
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ restore_active_polls: {e}]")

    try:
        await start_keepalive_server()
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ keepalive server: {e}]")

    print(f"[üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {datetime.now(kaliningrad_tz):%Y-%m-%d %H:%M:%S %Z}]")
    try:
        await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception:
        pass

    loop = asyncio.get_event_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, lambda s=sig: asyncio.create_task(shutdown()))
        except NotImplementedError:
            pass

    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
