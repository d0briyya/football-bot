# -*- coding: utf-8 -*-
import os
import json
import asyncio
import aiohttp
from datetime import datetime
from collections import defaultdict
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, PollAnswer
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ ===
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN", "")
CHAT_ID = int(os.getenv("TG_CHAT_ID", "0"))
ADMIN_ID = int(os.getenv("TG_ADMIN_ID", "0"))

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# === –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã ===
STATS_FILE = "stats.json"

# === –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===
# active_polls_by_msg: message_id -> poll_config
active_polls_by_msg = {}         # message_id -> poll_config dict
active_polls_by_pollid = {}      # poll_id -> message_id
poll_votes = defaultdict(dict)   # poll_id -> { user_id: option_index }
user_cooldowns = {}              # user_id -> datetime for stats button cooldown

# === –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
def load_stats():
    if not os.path.exists(STATS_FILE):
        return {}
    try:
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_stats(stats):
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)

def add_attendance(user_repr):
    stats = load_stats()
    counts = stats.get("attendance", {})
    counts[user_repr] = counts.get(user_repr, 0) + 1
    stats["attendance"] = counts
    save_stats(stats)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ø–æ–¥ –æ–ø—Ä–æ—Å) ===
def stats_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_stats"))
    kb.add(types.InlineKeyboardButton("üèÜ –¢–æ–ø-5", callback_data="show_top"))
    return kb

# === Keep-alive (–ø–∏–Ω–≥–µ—Ä) ===
async def keep_alive():
    """–ü–∏–Ω–≥—É–µ–º –≤–Ω–µ—à–Ω–∏–π —Å–∞–π—Ç –∫–∞–∂–¥—ã–µ 59 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã Railway –Ω–µ —Å–ø–∞–ª."""
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                # –ª—ë–≥–∫–∏–π –∑–∞–ø—Ä–æ—Å –∫ Google ‚Äî —Ü–µ–ª—å: –≤–Ω–µ—à–Ω–∏–π outbound, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
                await session.get("https://www.google.com", timeout=20)
            print(f"[{datetime.now():%H:%M:%S}] üîÑ keep-alive ping ok")
        except Exception as e:
            print(f"[{datetime.now():%H:%M:%S}] [warning] keep-alive failed: {e}")
        await asyncio.sleep(59 * 60)  # 59 minutes

# === –û–ø—Ä–æ—Å—ã: send_poll / specific senders ===
async def send_poll_generic(question, options):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (message, poll_id)."""
    msg = await bot.send_poll(
        chat_id=CHAT_ID,
        question=question,
        options=options,
        is_anonymous=False,                # –≤–∞–∂–Ω–æ ‚Äî –Ω—É–∂–µ–Ω –Ω–µ–∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É—á—ë—Ç–∞
        allows_multiple_answers=False,
        reply_markup=stats_keyboard(),
        disable_notification=False
    )
    # –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä–µ–ø–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞
    try:
        await bot.pin_chat_message(CHAT_ID, msg.message_id)
    except Exception:
        # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        pass
    return msg, msg.poll.id

async def send_tuesday_poll():
    question = "‚öΩ –°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?"
    options = ["‚úÖ –î–∞, –∏–¥—É", "‚ùå –ù–µ—Ç, –Ω–µ —Å–º–æ–≥—É", "ü§î –ü–æ–¥?, –≤ 18:30 –æ—Ç–≤–µ—á—É —Ç–æ—á–Ω–æ"]
    msg, poll_id = await send_poll_generic(question, options)
    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
    active_polls_by_msg[msg.message_id] = {"day": "tue", "question": question, "options": options}
    active_polls_by_pollid[poll_id] = msg.message_id
    # —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–Ω–∞ –≤—Å—è–∫–∏–π)
    poll_votes.pop(poll_id, None)
    print(f"[{datetime.now():%H:%M:%S}] –û–ø—Ä–æ—Å –≤—Ç–æ—Ä–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω (msg={msg.message_id}, poll={poll_id})")

async def send_thursday_poll():
    question = "‚öΩ –°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?"
    options = ["‚úÖ –î–∞, –∏–¥—É", "‚ùå –ù–µ—Ç, –Ω–µ —Å–º–æ–≥—É", "ü§î –ü–æ–¥?, –≤ 18:30 –æ—Ç–≤–µ—á—É —Ç–æ—á–Ω–æ"]
    msg, poll_id = await send_poll_generic(question, options)
    active_polls_by_msg[msg.message_id] = {"day": "thu", "question": question, "options": options}
    active_polls_by_pollid[poll_id] = msg.message_id
    poll_votes.pop(poll_id, None)
    print(f"[{datetime.now():%H:%M:%S}] –û–ø—Ä–æ—Å —á–µ—Ç–≤–µ—Ä–≥ –∑–∞–ø—É—â–µ–Ω (msg={msg.message_id}, poll={poll_id})")

async def send_friday_poll():
    question = "‚öΩ –ó–∞–≤—Ç—Ä–∞ –≤ 12:00 —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ?"
    options = ["‚úÖ –î–∞, –∏–¥—É", "‚ùå –ù–µ—Ç, –Ω–µ —Å–º–æ–≥—É"]
    msg, poll_id = await send_poll_generic(question, options)
    active_polls_by_msg[msg.message_id] = {"day": "fri", "question": question, "options": options}
    active_polls_by_pollid[poll_id] = msg.message_id
    poll_votes.pop(poll_id, None)
    print(f"[{datetime.now():%H:%M:%S}] –û–ø—Ä–æ—Å –ø—è—Ç–Ω–∏—Ü–∞ –∑–∞–ø—É—â–µ–Ω (msg={msg.message_id}, poll={poll_id})")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ PollAnswer (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) ===
@dp.poll_answer_handler()
async def handle_poll_answer(poll_answer: PollAnswer):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å—É–µ—Ç (update PollAnswer).
    poll_answer.user -> User
    poll_answer.option_ids -> —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
    """
    try:
        poll_id = poll_answer.poll_id
        user = poll_answer.user
        option_ids = poll_answer.option_ids or []
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ poll_id
        if option_ids:
            # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π (–ø–æ—Å–∫–æ–ª—å–∫—É allows_multiple_answers=False)
            poll_votes[poll_id][user.id] = option_ids[0]
        else:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è–ª –≥–æ–ª–æ—Å (–æ–ø—Ü–∏—è –ø—É—Å—Ç–∞—è) ‚Äî —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            if user.id in poll_votes[poll_id]:
                poll_votes[poll_id].pop(user.id, None)
        # –ª–æ–≥–∏—Ä—É–µ–º
        print(f"[{datetime.now():%H:%M:%S}] PollAnswer: poll={poll_id} user={user.id} option_ids={option_ids}")
    except Exception as e:
        print(f"[warning] handle_poll_answer error: {e}")

# === –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ scheduler) ===
async def check_poll_results(poll_id, day):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ—Ä–∞ –ø–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏:
     - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç poll (stop_poll),
     - —á–∏—Ç–∞–µ—Ç poll_votes[poll_id] –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏,
     - —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ '–î–∞' option_index == 0),
     - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –≤ —á–∞—Ç,
     - —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –æ poll –∏–∑ –ø–∞–º—è—Ç–∏.
    """
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ counts
        stopped = await bot.stop_poll(CHAT_ID, poll_id)
    except Exception as e:
        print(f"[warning] stop_poll failed for poll {poll_id}: {e}")
        stopped = None

    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ poll_votes (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ)
    votes = poll_votes.get(poll_id, {})  # {user_id: option_index}
    yes_count = sum(1 for v in votes.values() if v == 0)
    no_count = sum(1 for v in votes.values() if v == 1)

    # –ï—Å–ª–∏ stop_poll –≤–µ—Ä–Ω—É–ª counts, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö (fallback)
    if stopped:
        try:
            # find options by text to map indexes (but usually 0 is yes)
            opt0 = stopped.options[0].voter_count if len(stopped.options) > 0 else None
            opt1 = stopped.options[1].voter_count if len(stopped.options) > 1 else None
            # if our counts smaller than actual, prefer stopped counts
            if isinstance(opt0, int) and opt0 > yes_count:
                yes_count = opt0
            if isinstance(opt1, int) and opt1 > no_count:
                no_count = opt1
        except Exception:
            pass

    # –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –¥–æ–±–∞–≤–ª—è–µ–º +1 –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫—Ç–æ –≤ votes –≤—ã–±—Ä–∞–ª option 0 ("–î–∞")
    stats = load_stats()
    attendance = stats.get("attendance", {})  # mapping user_repr -> int
    for uid, opt in votes.items():
        if opt == 0:
            try:
                # –ø–æ–ª—É—á–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø–æ API –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ poll_answer, –Ω–æ —É poll_answer.user –µ—Å—Ç—å username/full_name
                # NOTE: poll_answer.user –≤ handler –∏–º–µ–ª User –æ–±—ä–µ–∫—Ç ‚Äî –Ω–æ –∑–¥–µ—Å—å –º—ã —Ç–æ–ª—å–∫–æ –∏–º–µ–µ–º uid.
                # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å username, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ –ø–æ–ª—É—á–∏—Ç—å chat member (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Ä–æ–≥–∏–º).
                member = None
                try:
                    member = await bot.get_chat_member(CHAT_ID, uid)
                    user_repr = member.user.full_name if member.user.full_name else str(uid)
                    if member.user.username:
                        user_repr = f"{member.user.full_name} (@{member.user.username})"
                except Exception:
                    user_repr = str(uid)
            except Exception:
                user_repr = str(uid)

            attendance[user_repr] = attendance.get(user_repr, 0) + 1

    stats["attendance"] = attendance
    save_stats(stats)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"üìä <b>–ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞ ({day}):</b>\n‚úÖ –ü—Ä–∏–¥—É—Ç: {yes_count}\n‚ùå –ù–µ –ø—Ä–∏–¥—É—Ç: {no_count}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
    await bot.send_message(CHAT_ID, text, parse_mode=ParseMode.HTML)

    # —á–∏—Å—Ç–∏–º –ø–∞–º—è—Ç—å –ø–æ —ç—Ç–æ–º—É –æ–ø—Ä–æ—Å—É
    poll_votes.pop(poll_id, None)
    if poll_id in active_polls_by_pollid:
        msg_id = active_polls_by_pollid.pop(poll_id, None)
        if msg_id:
            active_polls_by_msg.pop(msg_id, None)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –º–æ–∂–Ω–æ)
    try:
        await bot.send_message(ADMIN_ID, f"‚úÖ –û–ø—Ä–æ—Å ({day}) –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception:
        print("[info] can't notify admin in private (maybe hasn't started chat)")

    print(f"[{datetime.now():%H:%M:%S}] check_poll_results done for poll {poll_id}")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º loop.create_task) ===
def schedule_polls():
    scheduler.remove_all_jobs()
    loop = asyncio.get_event_loop()

    # –∫–æ–Ω—Ñ–∏–≥ –æ–ø—Ä–æ—Å–æ–≤
    schedule_map = [
        ("tue", 10, 0, send_tuesday_poll, check_poll_results, 20),
        ("thu", 10, 0, send_thursday_poll, check_poll_results, 20),
        ("fri", 21, 0, send_friday_poll, check_poll_results, 12)  # —Å–≤–æ–¥–∫–∞ –∑–∞ 1 —á–∞—Å –¥–æ time_game
    ]

    for day, hour_p, min_p, send_func, check_func, game_hour in schedule_map:
        # –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø—Ä–æ—Å–∞
        scheduler.add_job(
            lambda f=send_func: loop.create_task(f()),
            trigger="cron",
            day_of_week=day,
            hour=hour_p,
            minute=min_p,
            id=f"poll_{day}",
            replace_existing=True
        )
        # –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –∑–∞ 1 —á–∞—Å –¥–æ –∏–≥—Ä—ã (game_hour - 1)
        scheduler.add_job(
            lambda func=check_func, d=day: loop.create_task(func(active_polls_by_pollid.get(next(iter(active_polls_by_msg), None)), d)),
            trigger="cron",
            day_of_week=day,
            hour=max(game_hour - 1, 0),
            minute=0,
            id=f"summary_{day}",
            replace_existing=True
        )

    print("[‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω]")

# === –ö–æ–º–∞–Ω–¥—ã: start, poll (manual), stats, top, resetstats, summary ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
        return
    schedule_polls()
    if not scheduler.running:
        scheduler.start()
    # –∑–∞–ø—É—Å–∫–∞–µ–º keep-alive (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω) ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ
    try:
        asyncio.create_task(keep_alive())
    except Exception:
        pass
    await message.reply(
        "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
        "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω ‚Äî –æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/poll tue|thu|fri ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é (–∞–¥–º–∏–Ω)\n"
        "/stats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤—Å–µ–º)\n"
        "/top ‚Äî —Ç–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤ (–≤—Å–µ–º)\n"
        "/resetstats ‚Äî —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–¥–º–∏–Ω)"
    )
    print(f"[{datetime.now():%H:%M:%S}] /start –æ—Ç {message.from_user.id}")

@dp.message_handler(commands=["poll"])
async def cmd_poll_manual(message: types.Message):
    # —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.get_args().strip().lower()
    if args == "tue":
        await send_tuesday_poll()
        await message.answer("‚úÖ –û–ø—Ä–æ—Å –≤—Ç–æ—Ä–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    elif args == "thu":
        await send_thursday_poll()
        await message.answer("‚úÖ –û–ø—Ä–æ—Å —á–µ—Ç–≤–µ—Ä–≥ –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    elif args == "fri":
        await send_friday_poll()
        await message.answer("‚úÖ –û–ø—Ä–æ—Å –ø—è—Ç–Ω–∏—Ü–∞ (–Ω–∞ —Å—É–±–±–æ—Ç—É) –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    else:
        await message.answer("‚öôÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å: /poll tue | /poll thu | /poll fri")

@dp.message_handler(commands=["stats"])
async def cmd_stats(message: types.Message):
    # –∞–Ω—Ç–∏—Å–ø–∞–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    now = datetime.now()
    last = user_cooldowns.get(message.from_user.id)
    if last and (now - last).total_seconds() < 30:
        return
    user_cooldowns[message.from_user.id] = now

    stats = load_stats()
    attendance = stats.get("attendance", {})
    if not attendance:
        await message.answer("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.")
        return
    text = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π (—Å—É–º–º–∞—Ä–Ω–æ):</b>\n"
    sorted_items = sorted(attendance.items(), key=lambda x: x[1], reverse=True)
    for i, (name, cnt) in enumerate(sorted_items, start=1):
        text += f"{i}. {name} ‚Äî {cnt}\n"
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message_handler(commands=["top"])
async def cmd_top(message: types.Message):
    stats = load_stats().get("attendance", {})
    if not stats:
        await message.answer("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.")
        return
    sorted_items = sorted(stats.items(), key=lambda x: x[1], reverse=True)[:5]
    text = "üèÜ <b>–¢–æ–ø-5 –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:</b>\n"
    for i, (name, cnt) in enumerate(sorted_items, start=1):
        text += f"{i}. {name} ‚Äî {cnt}\n"
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message_handler(commands=["resetstats"])
async def cmd_resetstats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return
    save_stats({})
    await message.reply("üßπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞.")

@dp.message_handler(commands=["summary"])
async def cmd_summary(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    if not active_polls_by_msg:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
        return
    text = "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã (message_id -> question):\n"
    for mid, info in active_polls_by_msg.items():
        text += f"{mid} ‚Äî {info.get('question')}\n"
    await message.reply(text)

# === Callback handlers for inline buttons ===
@dp.callback_query_handler(lambda c: c.data == "show_stats")
async def cb_show_stats(query: types.CallbackQuery):
    await cmd_stats(query.message)

@dp.callback_query_handler(lambda c: c.data == "show_top")
async def cb_show_top(query: types.CallbackQuery):
    await cmd_top(query.message)

# === Startup / main ===
async def on_startup(_):
    # –æ—á–∏—Å—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    await reset_updates()
    schedule_polls()
    if not scheduler.running:
        scheduler.start()
    # –∑–∞–ø—É—Å–∫–∞–µ–º keepalive
    try:
        asyncio.create_task(keep_alive())
    except Exception:
        pass
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã–ª —á–∞—Ç —Å –±–æ—Ç–æ–º)
    try:
        await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    except Exception:
        print("[info] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –≤ –ª–∏—á–∫–µ (–Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å Start)")

if __name__ == "__main__":
    print("[start] Bot is starting...")
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)



