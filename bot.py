# -*- coding: utf-8 -*-
import os
import json
import asyncio
from datetime import datetime, time as dtime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone
from dotenv import load_dotenv
from aiohttp import web

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN", "YOUR_TOKEN_HERE")
CHAT_ID = int(os.getenv("TG_CHAT_ID", "-1002841862533"))
ADMIN_ID = int(os.getenv("TG_ADMIN_ID", "914344682"))
DATA_FILE = "bot_data.json"

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

kaliningrad_tz = timezone("Europe/Kaliningrad")
scheduler = AsyncIOScheduler(timezone=kaliningrad_tz)

active_polls = {}
stats = {}

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ ===
polls_config = [
    {"day": "tue", "time_poll": "09:00", "time_game": "20:00",
     "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
     "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ‚ùî (–æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ)"]},
    {"day": "thu", "time_poll": "09:00", "time_game": "20:00",
     "question": "–°–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ –≤ 20:00?",
     "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ‚ùî (–æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ)"]},
    {"day": "fri", "time_poll": "21:00", "time_game": "12:00",
     "question": "–ó–∞–≤—Ç—Ä–∞ –≤ 12:00 —Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ?",
     "options": ["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"]}
]

# === –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ===
def save_data():
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump({"active_polls": active_polls, "stats": stats}, f, ensure_ascii=False, indent=2)
        print(f"[üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã {datetime.now(kaliningrad_tz):%H:%M:%S}]")
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}]")

def load_data():
    global active_polls, stats
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            active_polls = data.get("active_polls", {})
            stats = data.get("stats", {})
            print("[‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã]")
        else:
            print("[‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å—Ç–∞—Ä—Ç —Å –Ω—É–ª—è]")
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}]")

# === –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def reset_updates():
    try:
        updates = await bot.get_updates()
        if updates:
            await bot.get_updates(offset=updates[-1].update_id + 1)
        print("[‚úÖ –ê–ø–¥–µ–π—Ç—ã –æ—á–∏—â–µ–Ω—ã]")
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–æ–≤: {e}]")

# === –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ ===
async def start_poll(poll):
    try:
        msg = await bot.send_poll(
            chat_id=CHAT_ID,
            question=poll["question"],
            options=poll["options"],
            is_anonymous=False,
            allows_multiple_answers=False
        )
        active_polls[msg.poll.id] = {
            "message_id": msg.message_id,
            "poll": poll,
            "votes": {},
            "active": True
        }
        save_data()

        await bot.pin_chat_message(chat_id=CHAT_ID, message_id=msg.message_id, disable_notification=True)
        await bot.send_message(CHAT_ID, "üì¢ <b>–ù–æ–≤—ã–π –æ–ø—Ä–æ—Å!</b>\n–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ üëá")
        print(f"[{datetime.now(kaliningrad_tz):%H:%M:%S}] üó≥ –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω: {poll['question']}")
    except Exception as e:
        print(f"[‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞: {e}]")

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤—Ç/—á—Ç 9‚Äì19, –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞, –µ—Å–ª–∏ '–î–∞' < 10) ===
async def remind_if_needed():
    now = datetime.now(kaliningrad_tz)
    if not (dtime(9, 0) <= now.time() <= dtime(19, 0)):
        return
    weekday = now.strftime("%a").lower()
    if weekday not in ["tue", "thu"]:
        return

    for poll_id, data in active_polls.items():
        poll_day = data["poll"]["day"]
        if not data.get("active", False):
            continue
        if poll_day not in ["tue", "thu"]:
            continue

        votes = data.get("votes", {})
        yes_count = sum(1 for v in votes.values() if v["answer"] == "–î–∞ ‚úÖ")
        if yes_count < 10:
            await bot.send_message(
                CHAT_ID,
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ {yes_count} —á–µ–ª–æ–≤–µ–∫(–∞) –æ—Ç–≤–µ—Ç–∏–ª–∏ '–î–∞ ‚úÖ'. "
                "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ!"
            )
            print(f"[üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({yes_count} '–î–∞')]")

# === –ò—Ç–æ–≥–∏ ===
async def send_summary(poll):
    for poll_id, data in list(active_polls.items()):
        if data["poll"] == poll:
            data["active"] = False
            votes = data["votes"]

            yes_users = [f"{v['name']} (ID:{uid})" for uid, v in votes.items() if v["answer"] == "–î–∞ ‚úÖ"]
            no_users = [f"{v['name']} (ID:{uid})" for uid, v in votes.items() if v["answer"] == "–ù–µ—Ç ‚ùå"]

            try:
                await bot.unpin_chat_message(chat_id=CHAT_ID, message_id=data["message_id"])
            except:
                pass

            total_yes = len(yes_users)
            status = (
                "‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –Ω–∞ —Ñ—É—Ç–±–æ–ª <b>–Ω–µ —Å–æ–±–∏—Ä–∞–µ–º—Å—è</b> ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ 10."
                if total_yes < 10 else
                "‚úÖ –°–µ–≥–æ–¥–Ω—è <b>—Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –ø–µ—Å—á–∞–Ω–∫–µ</b>! ‚öΩ"
            )

            text = (
                f"üìä <b>–ò—Ç–æ–≥ –æ–ø—Ä–æ—Å–∞:</b>\n\n"
                f"<b>{poll['question']}</b>\n\n"
                f"‚úÖ –î–∞ ({total_yes}): {', '.join(yes_users) or '‚Äî'}\n"
                f"‚ùå –ù–µ—Ç ({len(no_users)}): {', '.join(no_users) or '‚Äî'}\n\n"
                f"{status}\n\n"
                f"<i>–í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {len(votes)}</i>"
            )
            await bot.send_message(CHAT_ID, text)
            del active_polls[poll_id]
            save_data()
            break

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ===
@dp.message_handler(commands=["addplayer"])
async def cmd_addplayer(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤.")

    name = message.get_args().strip()
    if not name:
        return await message.reply("‚úçÔ∏è –£–∫–∞–∂–∏ –∏–º—è –∏–≥—Ä–æ–∫–∞: /addplayer –í–∞—Å—è")

    if not active_polls:
        return await message.reply("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")

    poll_id, data = list(active_polls.items())[-1]
    key = f"manual_{len([k for k in data['votes'] if str(k).startswith('manual_')]) + 1}"
    data["votes"][key] = {"name": name, "answer": "–î–∞ ‚úÖ"}
    save_data()

    yes_users = [v["name"] for v in data["votes"].values() if v["answer"] == "–î–∞ ‚úÖ"]
    text = (
        f"‚úÖ <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ '–î–∞ ‚úÖ' –≤—Ä—É—á–Ω—É—é.\n\n"
        f"<b>–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–î–∞ ‚úÖ):</b>\n"
        f"{', '.join(yes_users) or '‚Äî'}"
    )
    await bot.send_message(CHAT_ID, text, parse_mode="HTML")

# === –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ===
@dp.message_handler(commands=["removeplayer"])
async def cmd_removeplayer(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤.")

    name = message.get_args().strip()
    if not name:
        return await message.reply("‚úçÔ∏è –£–∫–∞–∂–∏ –∏–º—è –∏–≥—Ä–æ–∫–∞: /removeplayer –í–∞—Å—è")

    if not active_polls:
        return await message.reply("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")

    poll_id, data = list(active_polls.items())[-1]
    removed = False
    for key in list(data["votes"].keys()):
        if str(key).startswith("manual_") and data["votes"][key]["name"].lower() == name.lower():
            del data["votes"][key]
            removed = True
            break

    if not removed:
        return await message.reply(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö.", parse_mode="HTML")

    save_data()

    yes_users = [v["name"] for v in data["votes"].values() if v["answer"] == "–î–∞ ‚úÖ"]
    text = (
        f"‚ùå <b>{name}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
        f"<b>–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–î–∞ ‚úÖ):</b>\n"
        f"{', '.join(yes_users) or '‚Äî'}"
    )
    await bot.send_message(CHAT_ID, text, parse_mode="HTML")

# === –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ===
@dp.message_handler(commands=["commands"])
async def cmd_help(message: types.Message):
    text = (
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üó≥ <b>–ê–≤—Ç–æ–æ–ø—Ä–æ—Å—ã:</b>\n"
        "‚ÄÉ‚Ä¢ –í—Ç–æ—Ä–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ ‚Äî 9:00 (–∏–≥—Ä–∞ –≤ 20:00)\n"
        "‚ÄÉ‚Ä¢ –ü—è—Ç–Ω–∏—Ü–∞ ‚Äî 21:00 (–∏–≥—Ä–∞ –≤ —Å—É–±–±–æ—Ç—É 12:00)\n\n"
        "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        "‚ÄÉ‚Ä¢ –í—Ç/–ß—Ç –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ —Å 9:00 –¥–æ 19:00, –µ—Å–ª–∏ '–î–∞ ‚úÖ' < 10\n\n"
        "‚öôÔ∏è <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        "‚ÄÉ‚Ä¢ /addplayer –ò–º—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤—Ä—É—á–Ω—É—é (–î–∞ ‚úÖ)\n"
        "‚ÄÉ‚Ä¢ /removeplayer –ò–º—è ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
        "üëÅ <b>–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏–¥—è—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ —á–∞—Ç–µ.</b>\n"
    )
    await message.reply(text, parse_mode="HTML")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
def schedule_polls():
    scheduler.remove_all_jobs()
    loop = asyncio.get_event_loop()

    for poll in polls_config:
        tp = list(map(int, poll["time_poll"].split(":")))
        tg = list(map(int, poll["time_game"].split(":")))

        scheduler.add_job(
            lambda p=poll: asyncio.run_coroutine_threadsafe(start_poll(p), loop),
            trigger=CronTrigger(day_of_week=poll["day"], hour=tp[0], minute=tp[1], timezone=kaliningrad_tz),
            id=f"poll_{poll['day']}", replace_existing=True
        )

        hour_before = max(tg[0] - 1, 0)
        next_day = "sat" if poll["day"] == "fri" else poll["day"]
        scheduler.add_job(
            lambda p=poll: asyncio.run_coroutine_threadsafe(send_summary(p), loop),
            trigger=CronTrigger(day_of_week=next_day, hour=hour_before, minute=tg[1], timezone=kaliningrad_tz),
            id=f"summary_{poll['day']}", replace_existing=True
        )

    scheduler.add_job(lambda: asyncio.run_coroutine_threadsafe(remind_if_needed(), loop),
                      "interval", hours=2, id="reminder", replace_existing=True)
    scheduler.add_job(save_data, "interval", minutes=5, id="autosave", replace_existing=True)
    print("[‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω (Europe/Kalining—Ä–∞–¥)]")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤ ===
@dp.poll_answer_handler()
async def handle_poll_answer(poll_answer: types.PollAnswer):
    uid = poll_answer.user.id
    uname = poll_answer.user.first_name
    option_ids = poll_answer.option_ids
    for poll_id, data in active_polls.items():
        if poll_answer.poll_id == poll_id:
            if not option_ids:
                data["votes"].pop(uid, None)
            else:
                answer = data["poll"]["options"][option_ids[0]]
                data["votes"][uid] = {"name": uname, "answer": answer}
            save_data()
            break

# === KEEP-ALIVE ===
async def handle(request):
    return web.Response(text="‚úÖ Bot is alive and running!")

async def start_keepalive_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()
    print("[üåê KeepAlive server started]")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    load_data()
    await reset_updates()
    schedule_polls()
    scheduler.start()
    await start_keepalive_server()
    print(f"[üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {datetime.now(kaliningrad_tz):%Y-%m-%d %H:%M:%S %Z}]")
    await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())









